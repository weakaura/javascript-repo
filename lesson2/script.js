// ### 1. Дан код:
alert("Первое задание (ответы в коде под комментариями)")
let a = 1, b = 1, c, d;
c = ++a; alert(c);           // 2 - Здесь, из-за того что инкремент с префиксной формой, то переменной "с" присвоится новое (увеличенное на 1) значение "а". 
d = b++; alert(d);           // 1 - В этом случае форма постфиксная, значит элементу "d" присвоится старое значение "b", то есть 1. Уже после присвоения произойдет увеличение "b" на 1.
c = (2+ ++a); alert(c);      // 5 - Опять же. В скобках будет выражение (2 + "новое значение переменной "а""). Прошлое значение было 2 (после первого пункта). Новое будет 3. Сумма в скобках 2+3.
d = (2+ b++); alert(d);      // 4 - (2 + старое значение b). Старое значение b - 2 (после второго пункта). Значит в скобках выражение 2+2. d станет равно 4, а переменная "b" после операций получит новое значение 2+1=3.
alert(a);                    // 3 - после третьего пункта значение "a" стало 3.
alert(b);                    // 3 - четвертый пункт - значение "b" стало 3.
// Почему код даёт именно такие результаты?


// ### 2. Чему будет равен x в примере ниже?
a = 2;
let x = 1 + (a *= 2);
// ответ: 5. х = 1 + (а = а*2) = 1 + (2 * 2) = 5
alert("Ответ на второе задание: " + x);


// ### 3. Объявить две целочисленные переменные a и b и задать им произвольные начальные значения. Затем написать скрипт, который работает по следующему принципу:
// если a и b положительные, вывести их разность;
// если а и b отрицательные, вывести их произведение;
// если а и b разных знаков, вывести их сумму; ноль можно считать положительным числом. 
alert("Задание №3");

a = +prompt("Введите значение переменной a");
b = +prompt("Введите значение переменной b");

if ((a >= 0) && (b >= 0)) {
	alert(a - b);
} else if ((a < 0) && (b < 0)) {
	alert(a * b);
} else {
	alert(a + b)
}


// ### 4. Присвоить переменной а значение в промежутке [0..15]. С помощью оператора switch организовать вывод чисел от a до 15. 
alert("Задание №4");
a = +prompt("Введите число от 0 до 15. Будут выведены числа от заданного до 15")
m = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];
switch(a) {
	case a:
	m.splice(0, a)
	alert(m)
	break;
}

// ### 5. Реализовать основные 4 арифметические операции в виде функций с двумя параметрами. Обязательно использовать оператор return. 
alert("Задание №5");
function sum(a, b) {
	return a + b;
}
function minus(a, b) {
	return a - b;
}
function multiply(a, b) {
	return a * b;
}
function divide(a, b) {
	return a / b;
}


// ### 6. Реализовать функцию с тремя параметрами: function mathOperation(arg1, arg2, operation), где arg1, arg2 – значения аргументов, operation – строка с названием операции. 
// В зависимости от переданного значения операции выполнить одну из арифметических операций (использовать функции из пункта 3) и вернуть полученное значение (использовать switch). 
alert("Задание №6");

function mathOperation(arg1, arg2, operation) {
	switch(operation) {
		case "sum":
		return sum(arg1, arg2)
		alert(sum)
		break;
		case "minus":
		return minus(arg1, arg2)
		alert(minus)
		break;
		case "multiply":
		return multiply(arg1, arg2)
		alert(multiply)
		break;
		case "divide":
		return divide(arg1, arg2)
		alert(divide)
		break;
	}
}
arg1 = +prompt("Введите первое значение");
arg2 = +prompt("Введите второе значение");
let operation = prompt("Введите название операции (sum, minus, multiply, divide")
let y = mathOperation(arg1, arg2, operation);
alert(y);

// ### 7) *Сравнить null и 0. Попробуйте объяснить результат. 

// ### 8) *С помощью рекурсии организовать функцию возведения числа в степень. Формат: function power(val, pow), где val – заданное число, pow – степень.
alert("Задание №8")
function degree(val, pow) {
	if (val == 0) {
		return 0;
	} else if (pow == 0) {
		return 1;
	} else if (pow < 0) {
		return degree(1 / val, -pow);
	} else {
		return val * degree(val, pow-1);
	}
}
val = +prompt("Введите число для возведения в степень")
pow = +prompt("Введите значение степени")
alert(degree(val, pow));